/**
 *  Package and Import Specifications
 */
import java.util.*;
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};


terminal         SUFFIX, PREFIX, COMMA, LPAR, RPAR, BEGIN, END, IF, ELSE, PLUS;
terminal String  ID, STRING_LITERAL;

non terminal         program;
non terminal         funcdeclcalllist;
non terminal         funcdeclcall_;
non terminal         funcdeclcall;
non terminal         identlist;
non terminal         identlist2;
non terminal         calllist;
non terminal         call;
non terminal         exprlist;
non terminal         initial;
non terminal         expr;
non terminal         expr_;
non terminal         expr_id;
non terminal         expr_fn;
non terminal         cond;

precedence left  LPAR, RPAR, BEGIN, END, ELSE;

program   ::=  funcdeclcalllist:d                               {: System.out.println(
                                                                    String.format(
                                                                        "public class Main { \n public static void main(String[] args) {\n %s }\n",
                                                                        s)
                                                                    ); 
                                                                :}
        ;
funcdeclcalllist ::= funcdeclcall:d funcdeclcalllist:dl         {: RESULT = String.format("%s\n%s", d, dl); :}
    | /* empty funcdecllist */                                  {: RESULT = ""; :}  
    ;
funcdeclcall ::= ID:i LPAR identlist:il RPAR funcdeclcall_:e    {: RESULT = String.format("public static String %s(%s){return %s}\n",i, il, e); :}
    ;
funcdeclcall_ ::= BEGIN exprlist:el END                         {: RESULT = String.format("public static String %s(){return}\n", el); :}
    | /* empty funcdecllist */                                  {: RESULT = ""; :}  
    ;
identlist ::= expr:i identlist2:il2                             {: RESULT = String.format("%s%s", i, il2); :}
    | /* empty identlist */                                     {: RESULT = ""; :}                                                       
    ;
identlist2 ::= COMMA identlist2:il                              {: RESULT = String.format(",%s",il); :}
    |/* empty identlist2 */                                     {: RESULT = ""; :}                                                                                                        
    ;
cond ::= LPAR cond:c RPAR                                       {: RESULT = String.format("(%s)", c); :}
    | exprlist:e1 SUFFIX:op exprlist:e2                         {: RESULT = String.format("%s.endsWith(%s)", e2, e1); :}
    | exprlist:e1 PREFIX:op exprlist:e2                         {: RESULT = String.format("%s.startsWith(%s)", e2, e1); :}
    ;
exprlist ::= expr:e exprlist:el                                 {: String.format("%s\n%s", s, el); :}
    | /* empty exprlist */                                      {: RESULT = ""; :}                                                       
    ;
// expr ::= expr_:t                                                {: RESULT = String.format("%s\n}", t); :}
//     ;
expr ::= expr_fn:ti                                             {: RESULT = String.format("%s", ti); :}
    | STRING_LITERAL:c                                          {: RESULT = String.format("\"%s\"", c); :}
    | IF LPAR cond:c RPAR expr:t ELSE expr:e                    {: RESULT = String.format("%s ? %s : %s", c, t, e); :}
    | ID:i                                                      {: RESULT = String.format("%s", i); :}
    ;
expr_fn ::= ID:i LPAR identlist:il RPAR                         {: RESULT = String.format("%s(%s)}",i, il); :}
    ;

