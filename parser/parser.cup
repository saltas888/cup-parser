/**
 *  Package and Import Specifications
 */
import java.util.*;
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};


terminal         SUFFIX, PREFIX, COMMA, LPAR, RPAR, BEGIN, END, IF, ELSE, PLUS;
terminal String  ID, STRING_LITERAL;

non terminal         program;
non terminal         funcdeclcalllist;
non terminal         funcdeclcall;
non terminal         identlist;
non terminal         calllist;
non terminal         exprlist;
non terminal         expr;
non terminal         expr_fn;
non terminal         cond;
non terminal         expr2;
non terminal         identlistdecl;

precedence left  LPAR, RPAR, BEGIN, END, ELSE;

program   ::=  funcdeclcalllist:d                               {: System.out.println(
                                                                    String.format(
                                                                        "public class Main {\n %s \n }",
                                                                        d)
                                                                    ); 
                                                                :}
        ;
funcdeclcalllist ::= calllist:cl                                {: RESULT = String.format("public static void main(String[] args) {\n %s }", cl); :}
    | funcdeclcall:dl                                           {: RESULT = String.format("%s;", dl); :}
    ;
funcdeclcall ::= ID:i identlistdecl:il BEGIN exprlist:el END funcdeclcalllist:dl      {: RESULT = String.format("public static String %s(%s) \n {\nreturn %s\n}\n%s",i, il, el, dl); :}
    ;
calllist::= expr_fn:e1 calllist:cl                              {: RESULT = String.format("System.out.println(%s)\n%s;", e1, cl); :}
    | /* empty calllist */                                      {: RESULT = ""; :}  
    ;
identlistdecl ::= LPAR ID:i identlistdecl:il                    {: RESULT = String.format("String (%s%s", i, il); :}
    | COMMA ID:i identlistdecl:il                               {: RESULT = String.format(", String %s%s", i, il); :}
    | RPAR/* empty identlist */                                 {: RESULT = ")"; :}                                                       
    ;
cond ::= LPAR cond:c RPAR                                       {: RESULT = String.format("(%s)", c); :}
    | exprlist:e1 SUFFIX:op exprlist:e2                         {: RESULT = String.format("%s.endsWith(%s)", e2, e1); :}
    | exprlist:e1 PREFIX:op exprlist:e2                         {: RESULT = String.format("%s.startsWith(%s)", e2, e1); :}
    ;
exprlist ::= expr:e exprlist:el                                 {: RESULT = String.format("%s%s;", e, el); :}
    | expr:e PLUS exprlist:el                                   {: RESULT = String.format("%s.concat(%s)", e, el); :}
    | /* empty exprlist */                                      {: RESULT = ""; :}                                                       
    ;
expr ::= expr_fn:ti                                             {: RESULT = String.format("%s", ti); :}
    | STRING_LITERAL:c                                          {: RESULT = String.format("\"%s\"", c); :}
    | IF LPAR cond:c RPAR expr:t ELSE expr:e                    {: RESULT = String.format("%s ? %s : %s", c, t, e); :}
    | ID:i                                                      {: RESULT = String.format("%s", i); :}
    ;
expr2 ::= expr_fn:ti                                             {: RESULT = String.format("%s", ti); :}
    | STRING_LITERAL:c                                          {: RESULT = String.format("\"%s\"", c); :}
    | IF LPAR cond:c RPAR expr:t ELSE expr:e                    {: RESULT = String.format("%s ? %s : %s", c, t, e); :}
    ;
expr_fn ::= ID:i LPAR identlist:il RPAR                         {: RESULT = String.format("%s(%s)",i, il); :}
    ;
identlist ::= expr2:e identlist:il2                             {: RESULT = String.format("%s%s", e, il2); :}
    | COMMA expr2:e identlist:il                                {: RESULT = String.format(",%s%s", e, il); :}
    | /* empty identlist */                                     {: RESULT = ""; :}                                                       
    ;

